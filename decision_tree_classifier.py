# -*- coding: utf-8 -*-
"""Decision tree classifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ih4m-GvFd90pa8xaOXtZ-Fc1BotBk0IR
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

df = pd.read_csv("Zoo.csv")

print("Shape:", df.shape)
display(df.head())
display(df.info())
display(df.describe())

print("\nðŸ”¢ Shape of the dataset:", df.shape)
print("\nðŸ§© Columns in dataset:", df.columns.tolist())
print("\nâœ… Missing values check:")
print(df.isnull().sum())

print("\nðŸ“ˆ Basic Statistics:")
display(df.describe())

plt.figure(figsize=(8,5))
sns.countplot(x='type', data=df, palette='viridis')
plt.title('Distribution of Animal Types')
plt.xlabel('Animal Type')
plt.ylabel('Count')
plt.show()

# Drop 'animal name' column before calculating correlation and heatmap
if 'animal name' in df.columns:
    df_numeric = df.drop(columns=['animal name'])
else:
    df_numeric = df.copy() # Create a copy if 'animal name' is already dropped


plt.figure(figsize=(12,8))
sns.heatmap(df_numeric.corr(), annot=False, cmap='coolwarm')
plt.title('Feature Correlation Heatmap')
plt.show()

# Drop 'animal name' column if it exists
if 'animal name' in df.columns:
    df = df.drop(columns=['animal name'])

# Define features (X) and target (y)
X = df.drop(columns=['type'])
y = df['type']

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.25, random_state=42, stratify=y
)

print("\nâœ… Data Split Done:")
print("Training Samples:", X_train.shape[0])
print("Testing Samples:", X_test.shape[0])

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.25, random_state=42, stratify=y
)

# Explicitly drop 'animal name' column from X_train and X_test if it exists
if 'animal name' in X_train.columns:
    X_train = X_train.drop(columns=['animal name'])
if 'animal name' in X_test.columns:
    X_test = X_test.drop(columns=['animal name'])


print("\nâœ… Data Split Done:")
print("Training Samples:", X_train.shape[0])
print("Testing Samples:", X_test.shape[0])


model = DecisionTreeClassifier(criterion='entropy', random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

print("\nðŸŽ¯ Model Performance:")
print("Accuracy:", round(accuracy_score(y_test, y_pred) * 100, 2), "%")
print("\nðŸ“Š Classification Report:")
print(classification_report(y_test, y_pred))

plt.figure(figsize=(6,4))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='Blues')
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

plt.figure(figsize=(20,10))
plot_tree(model, feature_names=X.columns, class_names=[str(i) for i in sorted(y.unique())],
          filled=True, fontsize=8)
plt.title("Decision Tree Visualization")
plt.show()

print("\nâœ… Project Completed Successfully!")